options:
	version: 1.0
	command: autosell

on load:
	load yaml "plugins/AutoSell/players.yml" as "players"
	load yaml "plugins/AutoSell/items.yml" as "items"
	load yaml "plugins/AutoSell/config.yml" as "AutoSell"
	if yaml "AutoSell" is empty:
		add "Price: %%price%%" to yaml list "items_lore" from "AutoSell"
		set yaml value "Progress_Message" from "AutoSell" to "&a%%amount%% &fof &a%%item%% &fsuccesfully sold for &a%%price%%"
		set yaml value "NoPermission_Message" from "AutoSell" to "&6AutoSell | &4You don't have permission to use this item"
		Set yaml value "ByPassPermission" from "AutoSell" to "autosell.*"
		set yaml value "buttons.AutoSell_active.display_item" from "AutoSell" to "limedye"
		set yaml value "buttons.AutoSell_active.display_name" from "AutoSell" to "&aActive"
		add "Left-Click to active AutoSell" to yaml list "buttons.AutoSell_active.lore" from "AutoSell"
		set yaml value "buttons.AutoSell_deactive.display_item" from "AutoSell" to "graydye"
		set yaml value "buttons.AutoSell_deactive.display_name" from "AutoSell" to "&4Deactive"
		add "Left-Click to deactive AutoSell" to yaml list "buttons.AutoSell_deactive.lore" from "AutoSell"
		save yaml "AutoSell"
		
function getAutoSell3(item: text, info: text) :: object:
	set {_info} to yaml value "items.%{_item}%.%{_info}%" from "items"
	return {_info}
		
function mainMenuAutoSell(p: player):
	open virtual chest with size 6 named "&6AutoSell &8>> &aMain Menu" to {_p}
	format gui slot (integers between 0 and 54) of {_p} with black stained glass pane named "skAutoSell by Fhalinkz" to nothing
	loop yaml nodes with keys "items" from "items":
		set {_id} to getAutoSell3("%loop-value%", "id")
		set {_slot} to getAutoSell3("%loop-value%", "slot")
		set {_name} to getAutoSell3("%loop-value%", "name")
		set {_item} to getAutoSell3("%loop-value%", "item")
		set {_permission} to getCategory({_id}, "permission")
		set {_var::*} to yaml list "items.%loop-value%.lore" from "items"
		set {_iitem} to {_item} parsed as item
		if {_p} has permission {_permission}:
			format gui slot {_slot} of {_p} with {_iitem} named "%{_name}%" with lore {_var::*} to close:
				menuAutoSell({_p}, {_id})
				set {autosell::%{_p}%} to getCategoryName({_id}))
	
function getCategory(id: number, n: text) :: text:
	loop yaml nodes with keys "items" from "items":
		set {_cat} to yaml value "items.%loop-value%.id" from "items"
		if {_cat} == {_id}:
			set {_loop} to yaml value "items.%loop-value%.%{_n}%" from "items"
			return {_loop}
			
function getCategoryName(id: number) :: text:
	loop yaml nodes with keys "items" from "items":
		set {_cat} to yaml value "items.%loop-value%.id" from "items"
		if {_cat} == {_id}:
			set {_loop} to loop-value
			return {_loop}
	
function menuAutoSell(p: player, s: number):
	set {_cat} to getCategoryName({_s})
	set {_cname} to getCategory({_s}, "name")
	open virtual chest with size 6 named "&6AutoSell &8>> &a%{_cname}%" to {_p}
	format gui slot (integers between 0 and 54) of {_p} with black stained glass pane named "skAutoSell by Fhalinkz" to nothing
	loop yaml nodes with keys "items.%{_cat}%.items" from "items":
		set {_slot} to getAutoSell2({_cat}, "%loop-value%", "slot")
		set {_name} to getAutoSell2({_cat}, "%loop-value%", "display_name")
		set {_item} to getAutoSell2({_cat}, "%loop-value%", "display_item")
		set {_amount} to getAutoSell2({_cat}, "%loop-value%", "amount")
		set {_price} to getAutoSell2({_cat}, "%loop-value%", "price")
		set {_id} to getAutoSell2({_cat}, "%loop-value%", "id")
		set {_perm} to getAutoSell2({_cat}, "%loop-value%", "permission")
		set {_var::*} to yaml list "items_lore" from "AutoSell"
		loop size of {_var::*} times:
			replace "%%price%%" with "%{_price}%" in {_var::%loop-number%}
		set {_iitem} to {_item} parsed as item
		format gui slot {_slot} of {_p} with {_iitem} named "%{_name}%" with lore {_var::*} to nothing
		format gui slot 53 of {_p} with arrow named "Back" to run function mainMenuAutoSell({_p})
		if getAutoSell({_p}, {_id}) isn't set:
			set yaml value "players.%{_p}%.%{_id}%" from "players" to false
			save yaml "players"
			wait a tick
		if getAutoSell({_p}, {_id}) is false:
			set {_autosellon::*} to yaml list "buttons.AutoSell_active.lore" from "AutoSell"
			set {_autosell::D::name} to yaml value "buttons.AutoSell_deactive.display_name" from "AutoSell"
			set {_autosell::D::item} to yaml value "buttons.AutoSell_deactive.display_item" from "AutoSell" parsed as item
			format gui slot ({_slot} + 9) of {_p} with {_autosell::D::item} named "%{_autosell::D::name}%" with lore {_autosellon::*} to run:
				autosellOn({_p}, {_id}, {_perm})
				wait a tick
				menuAutoSell({_p}, {_s})
		
		if getAutoSell({_p}, {_id}) is true:
			set {_autosellof::*} to yaml list "buttons.AutoSell_deactive.lore" from "AutoSell"
			set {_autosell::A::name} to yaml value "buttons.AutoSell_active.display_name" from "AutoSell"
			set {_autosell::A::item} to yaml value "buttons.AutoSell_active.display_item" from "AutoSell" parsed as item
			format gui slot ({_slot} + 9) of {_p} with {_autosell::A::item} named "%{_autosell::A::name}%" with lore {_autosellof::*} to run:
				autosellOff({_p}, {_id}) 
				wait a tick
				menuAutoSell({_p}, {_s})
	
function getAutoSellItem(item: item) :: item:
	set {_loop} to getAutoSellLoop({_item})
	set {_testitem} to yaml value "items.%{_loop}%.event-item" from "items" parsed as item
	if {_testitem} is {_item}:
		return {_item}

function getAutoSellLoop(item: item) :: text:
	loop yaml nodes with keys "items" from "items":
		set {_event.item} to yaml value "items.%loop-value%.event-item" from "items" parsed as item
		if {_event.item} == {_item}:
			set {_loop} to loop-value
			return {_loop}
			stop loop
			
on break:
	if event-block is getAutoSellItem(player, event-block):
		set {_loop} to getAutoSellLoop(player, event-block)
		set {_id} to yaml value "items.%{autosell::%player%}%.items.%{_loop}%.id" from "items"
		if getAutoSell(player, {_id}) is true:
			set {_amount} to yaml value "items.%{autosell::%player%}%.items.%{_loop}%.amount" from "items"
			set {_price} to yaml value "items.%{autosell::%player%}%.items.%{_loop}%.price" from "items"
			set {_event.drop} to yaml value "items.%{autosell::%player%}%.items.%{_loop}%.event-item-drop" from "items" parsed as item
			set {_pamount} to amount of {_event.drop} in player's inventory
			if {_pamount} is greater than or equal to {_amount}:
				remove {_amount} of {_event.drop} from player's inventory
				add {_price} to player's balance
				set {_message} to yaml value "Progress_Message" from "AutoSell"
				replace "%%item%%" with "%{_event.drop}%" in {_message}
				replace "%%price%%" with "%{_price}%" in {_message}
				replace "%%amount%%" with "%{_amount}%" in {_message}
				send an action bar string {_message} to player

on inventory close:
	delAutoSell(player)
on join:
	delAutoSell(player)
on quit:
	delAutoSell(player)
		
function delAutoSell(p: player):
	set {_id} to -1
	loop 27 times:
		add 1 to {_id}
		set {_zaxd} to getAutoSell({_p}, {_id})
		if {_zaxd} is false:
			delete yaml value "players.%{_p}%.%{_id}%" from "players"
	save yaml "players"
	
function getAutoSell2(cat: text, item: text, info: text) :: object:
	set {_info} to yaml value "items.%{_cat}%.items.%{_item}%.%{_info}%" from "items"
	return {_info}
		
function getAutoSell(p: player, id: number) :: boolean:
	return yaml value "players.%{_p}%.%{_id}%" from "players"
			
function autosellOn(p: player, id: number, perm: text):
	set {_permission} to yaml value "ByPassPermission" from "AutoSell"
	if {_p} has permission "%{_perm}%":
		set yaml value "players.%{_p}%.%{_id}%" from "players" to true
		save yaml "players"
		mainMenuAutoSell({_p})
	else:
		set {_message} to yaml value "NoPermission_Message" from "AutoSell"
		send "%{_message}%" to {_p}
	if {_p} has permission "%{_permission}%":
		set yaml value "players.%{_p}%.%{_id}%" from "players" to true
		save yaml "players"
		mainMenuAutoSell({_p})
			
function autosellOff(p: player, id: number):
	set yaml value "players.%{_p}%.%{_id}%" from "players" to false
	save yaml "players"
	mainMenuAutoSell({_p})
	
command /{@command} [<text>]:
	trigger:
		if arg-1 isn't set:
			mainMenuAutoSell(player)
